# Directory where the binaries will be installed
bin_dir: /usr/local/bin

local_release_dir: "/tmp/releases"

# Cluster Loglevel configuration
kube_log_level: 1

# Users to create for basic auth in Kubernetes API via HTTP
kube_users:
  kube:
    pass: changeme
    role: admin
  root:
    pass: changeme
    role: admin

# Kubernetes cluster name, also will be used as DNS domain
cluster_name: cluster.local
#
# set this variable to calico if needed. keep it empty if flannel is used
kube_network_plugin: calico

# Kubernetes internal network for services, unused block of space.
kube_service_addresses: 10.233.0.0/18

# internal network. When used, it will assign IP
# addresses from this range to individual pods.
# This network must be unused in your network infrastructure!
kube_pods_subnet: 10.233.64.0/18

# internal network total size (optional). This is the prefix of the
# entire overlay network.  So the entirety of 4.0.0.0/16 must be
# unused in your environment.
# kube_network_prefix: 18

# internal network node size allocation (optional). This is the size allocated
# to each node on your network.  With these defaults you should have
# room for 4096 nodes with 254 pods per node.
kube_network_node_prefix: 24

# With calico it is possible to distributed routes with border routers of the datacenter.
peer_with_router: false
# Warning : enabling router peering will disable calico's default behavior ('node mesh').
# The subnets of each nodes will be distributed by the datacenter router

# The port the API Server will be listening on.
kube_apiserver_ip: "{{ kube_service_addresses|ipaddr('net')|ipaddr(1)|ipaddr('address') }}"
kube_apiserver_port: 443 # (https)
kube_apiserver_insecure_port: 8080 # (http)

# Internal DNS configuration.
# Kubernetes can create and mainatain its own DNS server to resolve service names
# into appropriate IP addresses. It's highly advisable to run such DNS server,
# as it greatly simplifies configuration of your applications - you can use
# service names instead of magic environment variables.
# You still must manually configure all your containers to use this DNS server,
# Kubernetes won't do this for you (yet).

# Upstream dns servers used by dnsmasq
upstream_dns_servers:
  - 8.8.8.8
  - 8.8.4.4

# Turn this varable to 'false' to disable whole DNS configuration.
dns_setup: true
dns_domain: "{{ cluster_name }}"

# Ip address of the kubernetes dns service
dns_server: "{{ kube_service_addresses|ipaddr('net')|ipaddr(2)|ipaddr('address') }}"
